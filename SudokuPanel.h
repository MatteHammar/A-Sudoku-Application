// Projekt - Sudoku, ProgrammeringsMetodik - DT047G
// Mathias Hammarström
// SudokuPanel.h, 14-12-2021, 14-01-2022


#ifndef SUDOKUPANEL_H
#define SUDOKUPANEL_H

#include "wx/wx.h"
#include "Sudoku.h"

//! SudokuPanel is a wxPanel that handles the sudoku board graphics and game logic.
class SudokuPanel: public wxPanel{
public:
	//! Constructor
	explicit SudokuPanel(wxFrame* parent, int panel_id = PANEL_ID);
	//! Destructor
	~SudokuPanel();

	//! Resizes panel based on parents size
	void Resize();
	//! Resize event catcher, calls resize function to resize
	void OnResize(wxSizeEvent &evt);

	//! Load a sudoku from file. And updates sudokugrid
	void LoadSudoku(std::string filename);

	//! Exit button for changing panel back to menu
	wxButton* m_exitButton;
private:
	//! wxPanel in which sudoku grid exists
	wxPanel* m_sudokuBox;

	//! Array of button which represents cells in the Sudoku state
	wxButton** m_sudokuButtons;

	//! Contains the sudoku state
	Sudoku m_sudokuData;

	//! A solved version the suduko state for reference
	Sudoku m_solvedSudoku;

	//! Contains index of the button that was clicked by the user
	int m_selectedButtonIndex;

	//! A stack of actions generated by the user, used by Undo function.
	std::vector<std::pair<size_t, int>> m_actionStack;

	//! Undo button looks in actionStack to determine what to undo.
	wxButton* m_undoButton;

	//! Solves the sudoku stepwise.
	wxButton* m_stepSolveButton;

	//! Tries to change cell to whatever key was pressed
	void OnKeyboardClicked(wxKeyEvent &evt);
	//! Highlights cell and saves index in m_selectedButtonIndex
	void OnSudokuButtonClicked(wxCommandEvent &evt);
	//! Looks in m_actionStack for previous game state and changes to it
	void OnUndoButtonClicked(wxCommandEvent &evt);
	//! Solves the sudoku by one step
	void OnStepSolveButtonClicked(wxCommandEvent &evt);
	
	//! Creates the array of sudokubuttons and puts them into grids
	void CreateSudokuGrid();
	//! Reloads the array of sudokubuttons
	void ReloadSudokuGrid();
	//! Solve entire sudoku, if solution can be found
	void SolveSudoku();
	//! Solve only one step, if solution can be found
	void StepSolveSudoku();

public:
	//! Constant SudokuPanel id
	static constexpr int PANEL_ID = 500;
	//! Constant Start of sudokubutton id
	static constexpr int SUDOKU_BUTTON_START_ID = 10000;
	//! Constant Exit button id
	static constexpr int EXIT_BUTTON_ID = 9999;
};

#endif SUDOKUPANEL_H